{
  "Nixix default Functional Component": {
    "prefix": "edfc",
    "body": "const ${1:${TM_FILENAME_BASE}} = (${2:props}) => {\n\treturn (\n\t\t${3:<div />}\n\t)\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "scope": "javascriptreact",
    "description": "Functional Component to return JSX."
  },
  "Nixix default Functional Component Typescript": {
    "prefix": "edfc",
    "body": "type Props = {\n\t$1\n};\n\nconst ${2:${TM_FILENAME_BASE}}: Nixix.FC<Props> = (${3:props}): someView => {\n\treturn (\n\t\t${4:<div />}\n\t)\n}\n\nexport default ${2:${TM_FILENAME_BASE}};",
    "scope": "typescriptreact",
    "description": "Functional Component to return JSX."
  },
  "Nixix Functional Component": {
    "prefix": "efc",
    "body": "export const ${1:${TM_FILENAME_BASE}} = (${2:props}) => {\n\treturn (\n\t\t${3:<div />}\n\t)\n}",
    "scope": "javascriptreact",
    "description": "Functional Component to return JSX."
  },
  "Nixix Functional Component Typescript": {
    "prefix": "efc",
    "body": "type Props = {\n\t$1\n};\n\nexport const ${1:${TM_FILENAME_BASE}}: Nixix.FC<Props> = (${2:props}): someView => {\n\treturn (\n\t\t${3:<div />}\n\t)\n}",
    "scope": "typescriptreact",
    "description": "Functional Component to return JSX."
  },
  "signalSnippet": {
    "prefix": "signalSnippet",
    "body": "const [${1:initValue}, set${1/(.*)/${1:/capitalize}/}] = signal(${2:value});",
    "scope": "javascriptreact,javascript",
    "description": "signal snippet"
  },
  "storeSnippet": {
    "prefix": "storeSnippet",
    "body": "const [${1:initValue}, set${1/(.*)/${1:/capitalize}/}] = store(${2:objectOrArray});",
    "scope": "javascriptreact,javascript",
    "description": "store snippet"
  },
  "memoSnippet": {
    "prefix": "memoSnippet",
    "body": "const ${1:derivedSignal} = memo(() => {\n\treturn ${2:initValue};\n}, [${3:deps}])",
    "scope": "typescriptreact,javascriptreact,javascript,typescript",
    "description": "memo snippet"
  },
  "callRefSnippet": {
    "prefix": "callRefSnippet",
    "body": "const ${1:ref} = callRef($2)$0",
    "scope": "javascriptreact,javascript",
    "description": "callRef snippet"
  },
  "signalSnippetTS": {
    "prefix": "signalSnippetTS",
    "body": "const [${1:initValue}, set${1/(.*)/${1:/capitalize}/}] = signal<${2:type}>(${3:value});",
    "scope": "typescriptreact,typescript",
    "description": "signal snippet typescript"
  },
  "storeSnippetTS": {
    "prefix": "storeSnippetTS",
    "body": "const [${1:initValue}, set${1/(.*)/${1:/capitalize}/}] = store<${2:type}>(${3:objectOrArray});",
    "scope": "typescriptreact,typescript",
    "description": "store snippet typescipt"
  },
  "callRefSnippetTS": {
    "prefix": "callRefSnippetTS",
    "body": "const ${1:ref} = callRef<${2:HTMLElement}>($3)$0",
    "scope": "typescriptreact,typescript",
    "description": "callRef snippet typescript"
  },
  "effectSnippet": {
    "prefix": "effectSnippet",
    "body": "effect(() => {\n\t\t$1\n\t})",
    "scope": "typescriptreact,javascriptreact,typescript,javascript",
    "description": "effect snippet"
  },
  "renderEffectSnippet": {
    "prefix": "renderEffectSnippet",
    "body": "renderEffect(() => {\n\t\t$1\n\t})",
    "scope": "typescriptreact,javascriptreact,typescript,javascript",
    "description": "renderEffect snippet"
  },
  "reactionSnippet": {
    "prefix": "reactionSnippet",
    "body": "reaction(() => {\n\t\t$1\n\t},\n[${2:deps}]\n)",
    "scope": "typescriptreact,javascriptreact,javascript,typescript",
    "description": "reaction snippet"
  },
  "Suspense": {
    "prefix": "Suspense",
    "body": "<Suspense fallback={$1} onError={$2}>\n\t${3:<div />}\n</Suspense>",
    "scope": "typescriptreact,javascriptreact",
    "description": "Suspense Component"
  },
  "For": {
    "prefix": "For",
    "body": "<For each={${1:storeArray}} fallback={${3:fallback}}>\n\t{\n\t\t(item, i) => {\n\t\t\treturn (\n\t\t\t\t${5:<div />}\n\t\t\t)\n\t\t}\n\t}\n</For>",
    "scope": "typescriptreact,javascriptreact",
    "description": "For Component"
  },
  "Show": {
    "prefix": "Show",
    "body": "<Show when={${1:effectCallback}} fallback={${2:fallback}}>\n\t<div />\n</Show>",
    "scope": "typescriptreact,javascriptreact",
    "description": "Show Component"
  },
  "Index": {
    "prefix": "Index",
    "body": "<Index each={${1:storeArray}} fallback={${3:fallback}}>\n\t{\n\t\t(item, i) => {\n\t\t\treturn (\n\t\t\t\t${5:<div />}\n\t\t\t)\n\t\t}\n\t}\n</Index>",
    "scope": "typescriptreact,javascriptreact",
    "description": "Index Component"
  },
}